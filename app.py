import streamlit as st
import pandas as pd
import plotly.express as px
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, roc_auc_score, roc_curve

st.set_page_config(page_title="Titanic Data Overview", layout="wide")
st.title("üö¢ Titanic - –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
df = pd.read_csv("cleaned_titanic.csv")

st.write("–°–ª—É—á–∞–π–Ω—ã–µ 5 —Å—Ç—Ä–æ–∫ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
st.dataframe(df.sample(5), use_container_width=True)

st.write(f"üßæ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape[0]} —Å—Ç—Ä–æ–∫ –∏ {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
st.dataframe(df.describe(), use_container_width=True)

st.subheader("üîç –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

fig_sex = px.histogram(df, x="Sex", color="Survived", barmode="group",
                       title="–í—ã–∂–∏–≤–∞–Ω–∏–µ –ø–æ –ø–æ–ª—É")
st.plotly_chart(fig_sex, use_container_width=True)

fig_age = px.histogram(df, x="Age", color="Survived", nbins=30,
                       title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å")
st.plotly_chart(fig_age, use_container_width=True)


st.subheader("ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")

with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏", expanded=True):
    n_estimators = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ (n_estimators)", 10, 500, 100, step=10)
    max_depth = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (max_depth)", 1, 20, 5)
    min_samples_split = st.slider("–ú–∏–Ω–∏–º—É–º –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è —Å–ø–ª–∏—Ç–∞ (min_samples_split)", 2, 10, 2)
    random_state = st.number_input("Random state", value=42, step=1)
    threshold = st.slider("–ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (threshold)", 0.0, 1.0, 0.5, step=0.01)

features = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Sex', 'Embarked']
df = df[features + ['Survived']]
df = pd.get_dummies(df, columns=['Sex', 'Embarked'], drop_first=True)

X = df.drop("Survived", axis=1)
y = df["Survived"]

if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=random_state)

    model = RandomForestClassifier(
        n_estimators=n_estimators,
        max_depth=max_depth,
        min_samples_split=min_samples_split,
        random_state=random_state
    )
    model.fit(X_train, y_train)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    y_train_proba = model.predict_proba(X_train)[:, 1]
    y_test_proba = model.predict_proba(X_test)[:, 1]

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞
    y_train_pred = (y_train_proba >= threshold).astype(int)
    y_test_pred = (y_test_proba >= threshold).astype(int)

    # –ú–µ—Ç—Ä–∏–∫–∏
    train_acc = accuracy_score(y_train, y_train_pred)
    test_acc = accuracy_score(y_test, y_test_pred)
    roc_auc = roc_auc_score(y_test, y_test_proba)

    col1, col2, col3 = st.columns(3)
    col1.metric("üéØ Train Accuracy", f"{train_acc:.2%}")
    col2.metric("üß™ Test Accuracy", f"{test_acc:.2%}")
    col3.metric("üìà ROC AUC", f"{roc_auc:.3f}")

    st.success("‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞!")

    # ROC-–∫—Ä–∏–≤–∞—è
    fpr, tpr, _ = roc_curve(y_test, y_test_proba)
    fig = px.area(
        x=fpr, y=tpr,
        title=f"ROC-–∫—Ä–∏–≤–∞—è (AUC={roc_auc:.3f})",
        labels=dict(x='False Positive Rate', y='True Positive Rate'),
        width=600, height=400
    )
    fig.add_shape(
        type='line', line=dict(dash='dash'),
        x0=0, x1=1, y0=0, y1=1
    )
    st.plotly_chart(fig)

else:
    st.info("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.")
