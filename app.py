import streamlit as st
import pandas as pd
import plotly.express as px
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, roc_auc_score, roc_curve

st.set_page_config(page_title="Titanic Data Overview", layout="wide")
st.title("üö¢ Titanic - –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")

st.subheader("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
df = pd.read_csv("cleaned_titanic.csv")

st.write("–°–ª—É—á–∞–π–Ω—ã–µ 5 —Å—Ç—Ä–æ–∫ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞:")
st.dataframe(df.sample(5), use_container_width=True)

st.write(f"üßæ –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: {df.shape[0]} —Å—Ç—Ä–æ–∫ –∏ {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")

st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
st.dataframe(df.describe(), use_container_width=True)


st.subheader("üìà –ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")

corr = df.corr(numeric_only=True)

fig_corr = px.imshow(
    corr,
    text_auto=True,
    color_continuous_scale='RdBu',
    aspect="auto",
    title="–ú–∞—Ç—Ä–∏—Ü–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏",
    labels=dict(color="–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è")
)
fig_corr.update_layout(width=800, height=600)
st.plotly_chart(fig_corr, use_container_width=True)

st.subheader("üîç –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")

fig_sex = px.histogram(df, x="Sex", color="Survived", barmode="group",
                       title="–í—ã–∂–∏–≤–∞–Ω–∏–µ –ø–æ –ø–æ–ª—É")
st.plotly_chart(fig_sex, use_container_width=True)

fig_age = px.histogram(df, x="Age", color="Survived", nbins=30,
                       title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –≤—ã–∂–∏–≤–∞–µ–º–æ—Å—Ç—å")
st.plotly_chart(fig_age, use_container_width=True)


st.subheader("ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏")

with st.expander("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏", expanded=True):
    n_estimators = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤ (n_estimators)", 10, 500, 100, step=10)
    max_depth = st.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ –¥–µ—Ä–µ–≤–∞ (max_depth)", 1, 20, 5)
    min_samples_split = st.slider("–ú–∏–Ω–∏–º—É–º –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è —Å–ø–ª–∏—Ç–∞ (min_samples_split)", 2, 10, 2)
    random_state = st.number_input("Random state", value=42, step=1)
    threshold = st.slider("–ü–æ—Ä–æ–≥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (threshold)", 0.0, 1.0, 0.5, step=0.01)

features = ['Pclass', 'Age', 'SibSp', 'Parch', 'Fare', 'Sex', 'Embarked']
df = df[features + ['Survived']]
df = pd.get_dummies(df, columns=['Sex', 'Embarked'], drop_first=True)

X = df.drop("Survived", axis=1)
y = df["Survived"]

# 1) –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
if st.button("üöÄ –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å"):
    # —Ä–∞–∑–±–∏–µ–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=random_state
    )
    model = RandomForestClassifier(
        n_estimators=n_estimators,
        max_depth=max_depth,
        min_samples_split=min_samples_split,
        random_state=random_state
    )
    model.fit(X_train, y_train)

    # –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –º–µ—Ç—Ä–∏–∫–∏
    y_proba = model.predict_proba(X_test)[:, 1]
    y_pred  = (y_proba >= threshold).astype(int)
    test_acc = accuracy_score(y_test, y_pred)
    roc_auc  = roc_auc_score(y_test, y_proba)

    # –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    feat_imp_df = pd.DataFrame({
        '–ü—Ä–∏–∑–Ω–∞–∫': X.columns,
        '–í–∞–∂–Ω–æ—Å—Ç—å': model.feature_importances_
    }).sort_values('–í–∞–∂–Ω–æ—Å—Ç—å', ascending=False)

    # –≥—Ä–∞—Ñ–∏–∫ –≤–∞–∂–Ω–æ—Å—Ç–∏
    fig_imp = px.bar(
        feat_imp_df,
        x='–í–∞–∂–Ω–æ—Å—Ç—å', y='–ü—Ä–∏–∑–Ω–∞–∫',
        orientation='h',
        title="–í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤",
        color='–í–∞–∂–Ω–æ—Å—Ç—å',
        color_continuous_scale='Blues'
    )
    fig_imp.update_layout(
        height=500,
        yaxis=dict(autorange="reversed")
    )

    # ROC-–∫—Ä–∏–≤–∞—è
    fpr, tpr, _ = roc_curve(y_test, y_proba)
    fig_roc = px.area(
        x=fpr, y=tpr,
        title=f"ROC-–∫—Ä–∏–≤–∞—è (AUC={roc_auc:.3f})",
        labels={'x': 'False Positive Rate', 'y': 'True Positive Rate'},
        width=600, height=400
    )
    fig_roc.add_shape(
        type='line', line=dict(dash='dash'),
        x0=0, x1=1, y0=0, y1=1
    )

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –≤ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    st.session_state.trained     = True
    st.session_state.test_acc    = test_acc
    st.session_state.roc_auc     = roc_auc
    st.session_state.feat_imp_df = feat_imp_df
    st.session_state.fig_imp     = fig_imp
    st.session_state.fig_roc     = fig_roc

# 2) –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: –≤—ã–≤–æ–¥–∏–º –º–µ—Ç—Ä–∏–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∏, –∏ Expander –¥–ª—è —É—Ç–µ—á–µ–∫
if st.session_state.get('trained', False):
    col1, col2 = st.columns(2)
    col1.metric("üéØ Test Accuracy", f"{st.session_state.test_acc:.2%}")
    col2.metric("üìà ROC AUC",       f"{st.session_state.roc_auc:.3f}")

    # –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    st.plotly_chart(st.session_state.fig_imp, use_container_width=True)
    st.plotly_chart(st.session_state.fig_roc, use_container_width=True)

    # expander –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤-—É—Ç–µ—á–µ–∫
    with st.expander("üí° –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏-—É—Ç–µ—á–∫–∏ –∏ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å", expanded=True):
        leak_features = st.multiselect(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:",
            options=st.session_state.feat_imp_df['–ü—Ä–∏–∑–Ω–∞–∫'].tolist(),
            key='leaks'
        )
        if leak_features and st.button("üîÑ –û–±—É—á–∏—Ç—å –±–µ–∑ —É—Ç–µ—á–µ–∫"):
            # —É–¥–∞–ª—è–µ–º —É—Ç–µ—á–∫–∏ –∏ –ø–µ—Ä–µ–æ–±—É—á–∞–µ–º
            X_no_leak = X.drop(columns=leak_features)
            X_t2, X_v2, y_t2, y_v2 = train_test_split(
                X_no_leak, y, test_size=0.2, random_state=random_state
            )
            model2 = RandomForestClassifier(
                n_estimators=n_estimators,
                max_depth=max_depth,
                min_samples_split=min_samples_split,
                random_state=random_state
            )
            model2.fit(X_t2, y_t2)

            y2_proba = model2.predict_proba(X_v2)[:, 1]
            y2_pred  = (y2_proba >= threshold).astype(int)
            acc2     = accuracy_score(y_v2, y2_pred)
            roc2     = roc_auc_score(y_v2, y2_proba)

            # —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            col1, col2 = st.columns(2)
            with col1:
                st.metric("üìà AUC —Å —É—Ç–µ—á–∫–æ–π",      f"{st.session_state.roc_auc:.3f}")
                st.metric("üéØ Acc —Å —É—Ç–µ—á–∫–æ–π",      f"{st.session_state.test_acc:.2%}")
            with col2:
                st.metric("üîê AUC –±–µ–∑ —É—Ç–µ—á–µ–∫",    f"{roc2:.3f}")
                st.metric("‚úÖ Acc –±–µ–∑ —É—Ç–µ—á–µ–∫",     f"{acc2:.2%}")

            st.success("‚úÖ –ú–æ–¥–µ–ª—å –±–µ–∑ —É—Ç–µ—á–µ–∫ –æ–±—É—á–µ–Ω–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
